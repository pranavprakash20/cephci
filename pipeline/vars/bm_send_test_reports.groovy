#!/usr/bin/env groovy
/*
    Groovy script to publish the report generated by baremetal specific pipeline
    Accepts test results as parameter,
    e.g :results = ["StageName1":[suite1: [Result: "Pass", Logs:"path to log"],
                                  suite2: [Result: "PASS", Logs:"path to log"],
                                  suite6: [Result: "PASS", Logs:"path to log"]],
                    "StageName2":[suite3: [Result: "Pass", Logs:"path to log"],
                                  suite4: [Result: "Fail", Logs:"path to log"],
                                  suite5: [Result: "Fail", Logs:"path to log"]],
                    "StageName3":[suite13: [Result: "Pass", Logs:"path to log"]]]
*/

def sendEMail(def test_results) {
    /*
        Send Email notification mentioning the stages, corresponding
        suites and their execution status
    */
    def body = new File("pipeline/vars/emailable-report.html").text
    def gchat_result = ""
    body += "<h2><u>Test Artifacts</h2></u><table><tr><td>COMPOSE_URL </td><td>${env.composeUrl}</td></tr><td>COMPOSE_ID</td><td> ${env.composeId}</td></tr>"
    body += "<tr><td> REPOSITORY </td><td>${env.repository}</td></tr>"

    body += "</table>"
    body += "<body><u><h3>Test Summary</h3></u><br />"
    body += "<p>Logs are available at ${env.BUILD_URL}</p><br />"

    body += "<table>"
    heading = "<tr><th>Stage</th><th>Suite</th><th>Result</th><th>Logs</th></tr>"
    body += heading
    for ( stage in test_results ) {
        body += "<tr><td rowspan = \"${stage.value.size()}\">${stage.key}</td>"
        gchat_result+= "\nSTAGE : ${stage.key}"
        for ( suites in stage.value ) {
            res = suites.value["Result"]
            body += "<td>${suites.key}</td>"
            body += "<td>${suites.value["Result"]}</td>"
            body += "<td>${suites.value["Logs"]}</td>"
            body += "</tr>"
            gchat_result += "\n\tSuite Name : ${suites.key}"
            gchat_result += "\n\t\tResult : ${suites.value["Result"]}"
            gchat_result += "\n\t\tLogs : ${suites.value["Logs"]}"
        }
        gchat_result += "\n\n"
    }
    body +="</table> </body> </html>"

    subject = "Test Execution Status for ${env.COMPOSE_ID}"
    to_list = "cephci@redhat.com"
    emailext (
        mimeType: 'text/html',
        subject: "${subject}",
        body: "${body}",
        from: "cephci@redhat.com",
        to: "${to_list}"
    )
    sendGChatNotification(gchat_result, composeId)
}

def sendGChatNotification(def testResults, composeId) {
    /*
        Send a GChat notification.
        Plugin used:
            googlechatnotification which allows to post build notifications to a Google
            Chat Messenger groups.
            parameter:
                url: Mandatory String parameter.
                     Single/multiple comma separated HTTP URLs or/and single/multiple
                     comma separated Credential IDs.
                message: Mandatory String parameter.
                         Notification message to be sent.
    */

    def msg= "Run result for ${composeId} \n\n ${testResults}"
    googlechatnotification(url: "id:rhcephCIGChatRoom", message: msg)
}

data = args
sendEMail(data)
